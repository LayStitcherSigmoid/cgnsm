# Generated by Django 5.0.7 on 2024-09-19 19:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('administrarium', '0004_pragmon_is_active_and_more'),
        ('pharmakeium', '0001_initial'),
        ('politeum', '0004_book_booklibgenlink_remove_culturalartifact_kind_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='DirectedPostRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('relation_type', models.CharField(blank=True, max_length=50, null=True)),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('STARTED', 'Started'), ('SUSPENDED', 'Suspended'), ('IN_PROGRESS', 'In Progress'), ('BLOCKED', 'Blocked'), ('ABANDONED', 'Abandoned'), ('COMPLETED', 'Completed')], default='NOT_STARTED', max_length=12)),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('STARTED', 'Started'), ('SUSPENDED', 'Suspended'), ('IN_PROGRESS', 'In Progress'), ('BLOCKED', 'Blocked'), ('ABANDONED', 'Abandoned'), ('COMPLETED', 'Completed')], default='NOT_STARTED', max_length=12)),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('is_complete', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('STARTED', 'Started'), ('SUSPENDED', 'Suspended'), ('IN_PROGRESS', 'In Progress'), ('BLOCKED', 'Blocked'), ('ABANDONED', 'Abandoned'), ('COMPLETED', 'Completed')], default='NOT_STARTED', max_length=12)),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='Throughline',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('name', models.CharField(max_length=100)),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='BookGoal',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_book', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='politeum.book')),
                ('relative_goal', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.goal')),
            ],
            options={
                'unique_together': {('relative_goal', 'relative_book')},
            },
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='GoalCoRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relation_type', models.CharField(choices=[('HARD', 'Hard Co-Entity'), ('SOFT', 'Soft Co-Entity')], default='SOFT', max_length=10)),
                ('source_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_co_relations', to='idiosynum.goal')),
                ('target_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_co_relations', to='idiosynum.goal')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='goal',
            name='co_related_goals',
            field=models.ManyToManyField(blank=True, related_name='co_related_goals_set', through='idiosynum.GoalCoRelation', to='idiosynum.goal'),
        ),
        migrations.CreateModel(
            name='GoalParentRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('child_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_relations', to='idiosynum.goal')),
                ('parent_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_relations', to='idiosynum.goal')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='goal',
            name='parent_goals',
            field=models.ManyToManyField(blank=True, related_name='child_goals_set', through='idiosynum.GoalParentRelation', to='idiosynum.goal'),
        ),
        migrations.CreateModel(
            name='PageSpecificNote',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('page_number', models.IntegerField()),
                ('book_relation', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.bookgoal')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('title', models.CharField(max_length=100)),
                ('body', models.TextField()),
                ('asymmetrically_related_posts', models.ManyToManyField(related_name='points_to', through='idiosynum.DirectedPostRelation', to='idiosynum.post')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='directedpostrelation',
            name='source_post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_posts', to='idiosynum.post'),
        ),
        migrations.AddField(
            model_name='directedpostrelation',
            name='target_post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_posts', to='idiosynum.post'),
        ),
        migrations.CreateModel(
            name='PostCategory',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('name', models.CharField(max_length=100)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='idiosynum.postcategory')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='post',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.postcategory'),
        ),
        migrations.CreateModel(
            name='PostRelationToBook',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_artifact', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='politeum.book')),
                ('relative_post', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.post')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='PostRelationToMolecule',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_molecule', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pharmakeium.molecule')),
                ('relative_post', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.post')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='PostRelationToPerson',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_post', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.post')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='GoalProjectRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idiosynum.goal')),
                ('relative_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idiosynum.project')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='goal',
            name='projects',
            field=models.ManyToManyField(blank=True, through='idiosynum.GoalProjectRelation', to='idiosynum.project'),
        ),
        migrations.CreateModel(
            name='ProjectCoRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relation_type', models.CharField(choices=[('HARD', 'Hard Co-Entity'), ('SOFT', 'Soft Co-Entity')], default='SOFT', max_length=10)),
                ('source_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_co_relations', to='idiosynum.project')),
                ('target_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_co_relations', to='idiosynum.project')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='project',
            name='co_related_projects',
            field=models.ManyToManyField(blank=True, related_name='co_related_projects_set', through='idiosynum.ProjectCoRelation', to='idiosynum.project'),
        ),
        migrations.CreateModel(
            name='ProjectParentRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('child_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_relations', to='idiosynum.project')),
                ('parent_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_relations', to='idiosynum.project')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='project',
            name='parent_projects',
            field=models.ManyToManyField(blank=True, related_name='child_projects_set', through='idiosynum.ProjectParentRelation', to='idiosynum.project'),
        ),
        migrations.CreateModel(
            name='ReadingLog',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('progress_percentage', models.PositiveIntegerField()),
                ('current_page', models.PositiveIntegerField()),
                ('relative_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='politeum.book')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='SymmetricPostRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('post_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symmetry_post_1', to='idiosynum.post')),
                ('post_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symmetry_post_2', to='idiosynum.post')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='post',
            name='symmetrically_related_posts',
            field=models.ManyToManyField(related_name='joined_with', through='idiosynum.SymmetricPostRelation', to='idiosynum.post'),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('name', models.CharField(max_length=100)),
                ('related_tags', models.ManyToManyField(blank=True, to='idiosynum.tag')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(blank=True, to='idiosynum.tag'),
        ),
        migrations.CreateModel(
            name='ReadingTask',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_book', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='politeum.book')),
                ('relative_task', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='idiosynum.task')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.CreateModel(
            name='TaskCoRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relation_type', models.CharField(choices=[('HARD', 'Hard Co-Entity'), ('SOFT', 'Soft Co-Entity')], default='SOFT', max_length=10)),
                ('source_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_co_relations', to='idiosynum.task')),
                ('target_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_co_relations', to='idiosynum.task')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='task',
            name='co_related_tasks',
            field=models.ManyToManyField(blank=True, related_name='co_related_tasks_set', through='idiosynum.TaskCoRelation', to='idiosynum.task'),
        ),
        migrations.CreateModel(
            name='TaskGoalRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idiosynum.goal')),
                ('relative_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idiosynum.task')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='task',
            name='goals',
            field=models.ManyToManyField(blank=True, through='idiosynum.TaskGoalRelation', to='idiosynum.goal'),
        ),
        migrations.CreateModel(
            name='TaskParentRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('child_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_relations', to='idiosynum.task')),
                ('parent_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_relations', to='idiosynum.task')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='task',
            name='parent_tasks',
            field=models.ManyToManyField(blank=True, related_name='child_tasks_set', through='idiosynum.TaskParentRelation', to='idiosynum.task'),
        ),
        migrations.CreateModel(
            name='TaskProjectRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('relative_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idiosynum.project')),
                ('relative_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='idiosynum.task')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='task',
            name='projects',
            field=models.ManyToManyField(blank=True, through='idiosynum.TaskProjectRelation', to='idiosynum.project'),
        ),
        migrations.AddField(
            model_name='post',
            name='throughlines',
            field=models.ManyToManyField(blank=True, to='idiosynum.throughline'),
        ),
        migrations.CreateModel(
            name='ThroughlineRelation',
            fields=[
                ('pragmon_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='administrarium.pragmon')),
                ('description', models.TextField()),
                ('source_throughline', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='source_throughline', to='idiosynum.throughline')),
                ('target_throughline', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='target_throughline', to='idiosynum.throughline')),
            ],
            bases=('administrarium.pragmon',),
        ),
        migrations.AddField(
            model_name='throughline',
            name='related_to',
            field=models.ManyToManyField(blank=True, through='idiosynum.ThroughlineRelation', to='idiosynum.throughline'),
        ),
        migrations.AddConstraint(
            model_name='goalcorelation',
            constraint=models.UniqueConstraint(fields=('source_goal', 'target_goal'), name='unique_goal_co_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='goalcorelation',
            unique_together={('source_goal', 'target_goal')},
        ),
        migrations.AddConstraint(
            model_name='goalparentrelation',
            constraint=models.UniqueConstraint(fields=('parent_goal', 'child_goal'), name='unique_goal_parent_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='goalparentrelation',
            unique_together={('parent_goal', 'child_goal')},
        ),
        migrations.AddConstraint(
            model_name='directedpostrelation',
            constraint=models.UniqueConstraint(fields=('source_post', 'target_post'), name='unique_post_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='goalprojectrelation',
            unique_together={('relative_project', 'relative_goal')},
        ),
        migrations.AddConstraint(
            model_name='projectcorelation',
            constraint=models.UniqueConstraint(fields=('source_project', 'target_project'), name='unique_project_co_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='projectcorelation',
            unique_together={('source_project', 'target_project')},
        ),
        migrations.AddConstraint(
            model_name='projectparentrelation',
            constraint=models.UniqueConstraint(fields=('parent_project', 'child_project'), name='unique_project_parent_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='projectparentrelation',
            unique_together={('parent_project', 'child_project')},
        ),
        migrations.AddConstraint(
            model_name='symmetricpostrelation',
            constraint=models.UniqueConstraint(fields=('post_1', 'post_2'), name='unique_symmetric_relation'),
        ),
        migrations.AddConstraint(
            model_name='symmetricpostrelation',
            constraint=models.UniqueConstraint(fields=('post_2', 'post_1'), name='unique_reverse_symmetric_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='readingtask',
            unique_together={('relative_task', 'relative_book')},
        ),
        migrations.AddConstraint(
            model_name='taskcorelation',
            constraint=models.UniqueConstraint(fields=('source_task', 'target_task'), name='unique_task_co_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='taskcorelation',
            unique_together={('source_task', 'target_task')},
        ),
        migrations.AlterUniqueTogether(
            name='taskgoalrelation',
            unique_together={('relative_task', 'relative_goal')},
        ),
        migrations.AddConstraint(
            model_name='taskparentrelation',
            constraint=models.UniqueConstraint(fields=('parent_task', 'child_task'), name='unique_task_parent_relation'),
        ),
        migrations.AlterUniqueTogether(
            name='taskparentrelation',
            unique_together={('parent_task', 'child_task')},
        ),
        migrations.AlterUniqueTogether(
            name='taskprojectrelation',
            unique_together={('relative_task', 'relative_project')},
        ),
    ]
